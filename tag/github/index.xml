<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github | </title>
    <link>https://guoruizhong.github.io/tag/github/</link>
      <atom:link href="https://guoruizhong.github.io/tag/github/index.xml" rel="self" type="application/rss+xml" />
    <description>Github</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 30 Jan 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://guoruizhong.github.io/media/icon_huecb05cd9522e49eb64e3268b1f605901_18061_512x512_fill_lanczos_center_3.png</url>
      <title>Github</title>
      <link>https://guoruizhong.github.io/tag/github/</link>
    </image>
    
    <item>
      <title>Github Git CheatSheet</title>
      <link>https://guoruizhong.github.io/post/post/github_cheatsheet/</link>
      <pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://guoruizhong.github.io/post/post/github_cheatsheet/</guid>
      <description>&lt;img src=&#34;https://raw.githubusercontent.com/guoruizhong/Images/master/20220130ae380c79400f164b3607a9a9c00f2e50.jpg&#34; alt=&#34;ae380c79400f164b3607a9a9c00f2e50&#34; style=&#34;zoom:200%;&#34; /&gt;
&lt;h3 id=&#34;setup&#34;&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Configuring user information used across all local repositories&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;git config --global user.name “[firstname lastname]” &lt;/code&gt;&lt;/th&gt;
&lt;th&gt;set a name that is identifiable for credit when review version history&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git config --global user.email “[valid-email]” &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;set an email address that will be associated with each history marker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git config --global color.ui auto &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;set automatic command line coloring for Git for easy reviewing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;setup--init&#34;&gt;&lt;strong&gt;Setup &amp;amp; Init&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Configuring user information, initializing and cloning repositories&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;git init 	&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;initialize an existing directory as a Git repository&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git clone [url] &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;retrieve an entire repository from a hosted location via URL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;branch--merge&#34;&gt;&lt;strong&gt;Branch &amp;amp; Merge&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Isolating work in branches, changing context, and integrating changes&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;list your branches. a * will appear next to the currently active branch&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git branch [branch-name]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;create a new branch at the current commit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git checkout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;switch to another branch and check it out into your working directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git merge [branch]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;merge the specified branch’s history into the current one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;show all commits in the current branch’s history&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;share--update&#34;&gt;&lt;strong&gt;Share &amp;amp; Update&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Retrieving updates from another repository and updating local repos&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;git remote add [alias] [url]&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;add a git URL as an alias&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git fetch [alias]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;fetch down all the branches from that Git remote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git merge [alias]/[branch]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;merge a remote branch into your current branch to bring it up to date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git push [alias] [branch]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Transmit local branch commits to the remote repository branch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;fetch and merge any commits from the tracking remote branch&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;stage--snapshot&#34;&gt;&lt;strong&gt;Stage &amp;amp; Snapshot&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Working with snapshots and the Git staging area&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;show modified files in working directory, staged for your next commit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git add [file]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;add a file as it looks now to your next commit (stage)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git reset [file]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;unstage a file while retaining the changes in working directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;diff of what is changed but not staged&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git diff --staged&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;diff of what is staged but not yet committed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git commit -m “[descriptive message]”&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;commit your staged content as a new commit snapshot&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;inspect--compare&#34;&gt;&lt;strong&gt;Inspect &amp;amp; Compare&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Examining logs, diffs and object information&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;show the commit history for the currently active branch&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git log branchB..branchA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;show the commits on branchA that are not on branchB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git log --follow [file]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;show the commits that changed file, even across renames&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git diff branchB...branchA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;show the diff of what is in branchA that is not in branchB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git show [SHA]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;show any object in Git in human-readable format&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tracking-path-changes&#34;&gt;&lt;strong&gt;Tracking Path Changes&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Versioning file removes and path changes&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;git rm [file]&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;delete the file from project and stage the removal for commit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git mv [existing-path] [new-path]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;change an existing file path and stage the move&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git log --stat -M&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;show all commit logs with indication of any paths that moved&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;igorning-patterns&#34;&gt;&lt;strong&gt;Igorning Patterns&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Preventing unintentional staging or commiting of files&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;logs/ .notes pattern/&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;Save a file with desired patterns as .gitignore with either direct string matches or wildcard globs.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git config --global core.excludesfile [file]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;system wide ignore pattern for all local repositories&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;retwrite-history&#34;&gt;&lt;strong&gt;Retwrite History&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Rewriting branches, updating commits and clearing history&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;git rebase [branch]&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;apply any commits of current branch ahead of specified one&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git reset --hard [commit]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;clear staging area, rewrite working tree from specified commit&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tempoary-commits&#34;&gt;&lt;strong&gt;Tempoary Commits&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Temporarily store modified, tracked files in order to change branches&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;git stash&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;Save modified and staged changes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git stash list&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;list stack-order of stashed file changes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git stash pop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;write working from top of stash stack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git stash drop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;discard the changes from top of stash stack&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Reference: &lt;a href=&#34;https://www.runoob.com/git/git-basic-operations.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;runoob.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
